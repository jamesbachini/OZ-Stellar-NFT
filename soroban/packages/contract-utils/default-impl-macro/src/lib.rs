use proc_macro::TokenStream;

use crate::helper::generate_default_impl;

mod helper;

/// Generates the missing default implementations for the `Trait`s provided by
/// OpenZeppelin stellar library.
///
/// `#[contractimpl]` macro requires all the default implementations to be
/// provided under the code block:
///
/// ```ignore
/// #[contractimpl]
/// impl Trait for MyContract {
///     /*
///         The client generated by the `#[contractimpl]` macro will have access only
///         to the methods specified in here. Which means, if you do not provide the
///         default implementations of the methods, the client generated by the
///         `#[contractimpl]` macro won't have access to those methods.
///
///         This is due to how macro's work in Rust. They cannot access the default
///         implementations of the methods of this Trait, since they are not in the
///         scope of the macro.
///
///         To overcome this, we provide a macro for our Traits, that generates the
///         missing default implementations for the methods of the Trait, so
///         you can only focus on the overrides, and leave the default implementations
///         out as per usual.
///     */
/// }
/// ```
///
/// # Example:
///
/// ```ignore
/// #[default_impl] // IMPORTANT: place this above `#[contractimpl]`
/// #[contractimpl]
/// impl NonFungibleToken for MyContract {
///     /* your overrides here */
/// }
/// ```
///
/// This macro works for the following traits:
/// - `FungibleToken`
/// - `FungibleBurnable`
/// - `NonFungibleToken`
/// - `NonFungibleBurnable`
/// - `NonFungibleEnumerable`
#[proc_macro_attribute]
pub fn default_impl(_attr: TokenStream, item: TokenStream) -> TokenStream {
    generate_default_impl(item)
}
